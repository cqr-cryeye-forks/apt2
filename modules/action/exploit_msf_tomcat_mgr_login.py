import re

from core.keystore import KeyStore
from core.msfActionModule import MsfActionModule


class exploit_msf_tomcat_mgr_login(MsfActionModule):
    def __init__(self, config, display, lock):
        super(exploit_msf_tomcat_mgr_login, self).__init__(config, display, lock)
        self.triggers = ["newService_http", "newPort_80", "newPort_8080"]
        self.requirements = ["msfconsole"]
        self.types = ["http"]
        self.title = "Attempt to determine if a tomcat instance has default creds"
        self.shortName = "MSFTomcatMgrLogin"
        self.description = "execute [auxiliary/scanner/http/tomcat_mgr_login] on each target"
        self.safeLevel = 4

    def getTargets(self):
        # we are interested only in the hosts that have UDP 161 open
        self.targets = KeyStore.get('service/http', 'port/tcp/80', 'port/tcp/8080')

    def process(self):
        self.getTargets()
        if len(self.targets) > 0:
            for t in self.targets:
                ports = KeyStore.get(f'service/http/{t}/tcp')
                for p in ports:
                    if not self.seentarget(t + p):
                        self.addseentarget(t + p)
                        cmd = {'config': ["use auxiliary/scanner/http/tomcat_mgr_login", f"set RHOSTS {t}",
                                          f"set RPORT {p}"], 'payload': 'win'}

                        result, outfile = self.execute_msf(t, cmd)
                        for line in result.splitlines():
                            if m := re.match('.*Successful: (.*):(.*)', line):
                                self.display.error(
                                    f"Tomcat on [{t}:{p}] has default creds of [{m[1].strip()}]/[{m[2].strip()}]")
                                KeyStore.add(
                                    f"creds/service/tomcat/{t}/tcp/{p}/username/{m[1].strip()}/password/{m[2].strip()}")

                                self.fire("newTomcatPassword")
            result = self.msf.cleanup()
        return
